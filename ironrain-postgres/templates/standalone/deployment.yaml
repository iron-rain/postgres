{{ if eq .Values.global.deploymentMode "standalone" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.global.name }}
  labels:
    deployment: {{ .Values.global.name }}-database
spec:
  replicas: 1
  selector:
    matchLabels:
        app: {{ .Values.global.name }}-database
  template:
    metadata:
      annotations:
      {{- range $key, $value := .Values.postgres.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      labels:
        app: {{ .Values.global.name }}-database
        cluster-name: {{ .Values.global.name }}-cluster
      {{- range $key, $value := .Values.postgres.labels }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    spec:
      securityContext:
        fsGroup: {{ .Values.postgres.securityContext.fsGroup }}
      volumes:
      - name: postgres-socket
        emptyDir: {}        
      {{ if .Values.postgres.persistence.enabled }}
      - name: {{ .Values.global.name }}-db-data
        persistentVolumeClaim:
          claimName: {{ .Values.global.name }}-db-data
      {{ if .Values.pgbackrest.enabled }}
      - name: pgbackrest-config
        configMap:
          name: {{ .Values.global.name }}-pgbackrest-config
      - name: entrypoint-scripts
        configMap:
          name: {{ .Values.global.name }}-pgbackrest-entrypoint
      {{ if eq .Values.pgbackrest.backupType "volume" }}
      - name: {{ .Values.global.name }}-backup
        persistentVolumeClaim:
          claimName: {{ .Values.global.name }}-db-backup
      {{ end }}
      {{ end }}
      {{ end }}
      initContainers:
      {{ if .Values.global.restore }}
      {{ if .Values.pgbackrest.enabled }}
      - name: {{ .Values.global.name }}-pgbackrest-restore
        {{ if eq .Values.postgres.type "postgis" }}
        image: {{ .Values.postgres.postgis.image.repository }}:{{ .Values.postgres.postgis.image.tag }}      
        {{ else}}
        image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
        {{ end }}        
        imagePullPolicy: {{ .Values.postgres.imagePullPolicy }}
        securityContext:
          runAsUser: {{ .Values.postgres.securityContext.runAsUser }}
        resources:
          requests:
            cpu: {{ .Values.pgbackrest.resources.requests.cpu }}
            memory: {{ .Values.pgbackrest.resources.requests.memory }}
          limits:
            cpu: {{ .Values.pgbackrest.resources.limits.cpu }}
            memory: {{ .Values.pgbackrest.resources.limits.memory }}          
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: {{ .Values.global.name }}-db-data
        - mountPath: /var/run/postgresql/
          name: postgres-socket
        {{ if eq .Values.pgbackrest.backupType "volume" }}
        - mountPath: /backup
          name: {{ .Values.global.name }}-backup   
        {{ end }}
        - name: pgbackrest-config
          mountPath: "/etc/pgbackrest"
          readOnly: true
        - name: entrypoint-scripts
          mountPath: /entrypoint.d
        command:
          - sh
          - entrypoint.d/restore.sh 
      {{ end }}
      {{ end }}
      containers:
      - name: {{ .Values.global.name }}-database
        {{ if eq .Values.postgres.type "postgis" }}
        image: {{ .Values.postgres.postgis.image.repository }}:{{ .Values.postgres.postgis.image.tag }}      
        {{ else}}
        image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
        {{ end }}     
        imagePullPolicy: Always
        securityContext:
          runAsUser: {{ .Values.postgres.securityContext.runAsUser }}
        ports:
        - containerPort: 5432
          name: tcp-5432
        resources:
          requests:
            cpu: {{ .Values.postgres.resources.requests.cpu }}
            memory: {{ .Values.postgres.resources.requests.memory }}
          limits:
            cpu: {{ .Values.postgres.resources.limits.cpu }}
            memory: {{ .Values.postgres.resources.limits.memory }}
        env:
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
          - name: POSTGRES_USER
            value: {{ .Values.postgres.defaultAdmin.username }}
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.defaultAdmin.passwordSecret }}
                key: POSTGRES_PASSWORD
        {{ if .Values.postgres.persistence.enabled }}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: {{ .Values.global.name }}-db-data
        - mountPath: /var/run/postgresql/
          name: postgres-socket
        {{ end }}
        {{ if .Values.pgbackrest.enabled }}
        - name: pgbackrest-config
          mountPath: "/etc/pgbackrest"
          readOnly: true
        - name: entrypoint-scripts
          mountPath: "/entrypoint.d"
          readOnly: true
        {{ if eq .Values.pgbackrest.backupType "volume" }}
        - mountPath: /backup
          name: {{ .Values.global.name }}-backup         
        {{ end }}   
        command:
          - sh 
          - /entrypoint.d/entrypoint.sh
        {{ end }}
      {{ if .Values.pgbackrest.enabled }}
      - name: {{ .Values.global.name }}-pgbackrest-backup
        {{ if eq .Values.postgres.type "postgis" }}
        image: {{ .Values.postgres.postgis.image.repository }}:{{ .Values.postgres.postgis.image.tag }}      
        {{ else}}
        image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
        {{ end }}     
        imagePullPolicy: Always
        securityContext:
          runAsUser: {{ .Values.postgres.securityContext.runAsUser }}
        resources:
          requests:
            cpu: {{ .Values.pgbackrest.resources.requests.cpu }}
            memory: {{ .Values.pgbackrest.resources.requests.memory }}
          limits:
            cpu: {{ .Values.pgbackrest.resources.limits.cpu }}
            memory: {{ .Values.pgbackrest.resources.limits.memory }}                    
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: {{ .Values.global.name }}-db-data
        - mountPath: /var/run/postgresql/
          name: postgres-socket
        {{ if eq .Values.pgbackrest.backupType "volume" }}
        - mountPath: /backup
          name: {{ .Values.global.name }}-backup   
        {{ end }}
        - name: pgbackrest-config
          mountPath: "/etc/pgbackrest"
          readOnly: true 
        - name: entrypoint-scripts
          mountPath: "/entrypoint.d"        
        command:
          - python
          - /entrypoint.d/backup-schedule.py
      {{ end }}
{{ end }}