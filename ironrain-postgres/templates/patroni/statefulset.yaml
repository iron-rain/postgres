{{ if .Values.postgres.ha.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.postgres.name }}-headless
  labels:
    app: {{ .Values.postgres.name }}-app
    cluster-name: {{ .Values.postgres.name }}-cluster
spec:
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.postgres.name }}-app-cluster
  labels:
    app: {{ .Values.postgres.name }}-app
    cluster-name: {{ .Values.postgres.name }}-cluster
spec:
  replicas: 3    
  serviceName: {{ .Values.postgres.name }}-headless
  selector:
    matchLabels:
      app: {{ .Values.postgres.name }}-app
      cluster-name: {{ .Values.postgres.name }}-cluster            
  template:
    metadata:
      labels:
        app: {{ .Values.postgres.name }}-app
        cluster-name: {{ .Values.postgres.name }}-cluster      
    spec:
      serviceAccountName: {{ .Values.postgres.name }}-sa
      securityContext:
        fsGroup: 999 
      #initContainers:      
      #- name: {{ .Values.postgres.name }}-pgbackrest-restore
        #{{ if .Values.postgres.postgis.enabled }}
        #image: {{ .Values.postgres.postgis.image.repository }}:{{ .Values.postgres.postgis.image.tag }}      
        #{{ else}}
        #image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
        #{{ end }}        
        #imagePullPolicy: Always
        #securityContext:
          #runAsUser: 999
        #volumeMounts:
        #- mountPath: /var/lib/postgresql/data
          #name: pgdata
        #- name: pgbackrest-config
          #mountPath: "/etc/pgbackrest"
          #readOnly: true
        #command:
          #- sh
          #- /etc/pgbackrest/restore-point.sh 
      containers:
      - name: {{ .Values.postgres.name }}-cluster
        securityContext:
          runAsUser: 999
        image: ironrainio/postgis:12-patroni
        imagePullPolicy: IfNotPresent
        command:
        - /entrypoint.d/entrypoint.sh      
        ports:
        - containerPort: 8008
          name: tcp-8008
          protocol: TCP
        - containerPort: 5432
          name: tcp-5432
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: pgdata
        - mountPath: /entrypoint.d
          name: entrypoint
        - mountPath: /var/run/postgresql/
          name: postgres-socket          
        - name: pgbackrest-config
          mountPath: "/etc/pgbackrest"
          readOnly: true
        env:
        - name: PATRONI_KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PATRONI_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PATRONI_KUBERNETES_BYPASS_API_SERVICE
          value: 'false'
        - name: PATRONI_KUBERNETES_USE_ENDPOINTS
          value: 'true'
        - name: PATRONI_KUBERNETES_LABELS
          value: '{app: {{ .Values.postgres.name }}-app, cluster-name: {{ .Values.postgres.name }}-cluster}'
        - name: PATRONI_SUPERUSER_USERNAME
          value: postgres
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgres.ha.secrets }}
              key: SUPERUSER_PASSWORD
        - name: PATRONI_REPLICATION_USERNAME
          value: standby
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgres.ha.secrets }}
              key: STANDBY_PASSWORD
        - name: PATRONI_SCOPE
          value: {{ .Values.postgres.name }}-cluster
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: /var/lib/postgresql/data/pgdata
        - name: PATRONI_POSTGRESQL_PGPASS
          value: /tmp/pgpass
        - name: PATRONI_POSTGRESQL_LISTEN
          value: '0.0.0.0:5432'
        - name: PATRONI_RESTAPI_LISTEN
          value: '0.0.0.0:8008'

      #- name: {{ .Values.postgres.name }}-pgbackrest-backup
        #{{ if .Values.postgres.postgis.enabled }}
        #image: {{ .Values.postgres.postgis.image.repository }}:{{ .Values.postgres.postgis.image.tag }}      
        #{{ else}}
        #image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
        #{{ end }}        
        #imagePullPolicy: IfNotPresent
        #securityContext:
          #runAsUser: 999
        #volumeMounts:
        #- mountPath: /var/lib/postgresql/data
          #name: pgdata: removing initialize key after failed attempt to bootstrap the cluster
        #- mountPath: /var/run/postgresql/
          #name: postgres-socket        
        #- name: pgbackrest-config
          #mountPath: "/etc/pgbackrest"
          #readOnly: true 
        #- name: schedule-config
          #mountPath: "/entrypoint.d"          
        #command:
          #- python
          #- /entrypoint.d/backup-schedule.py
      terminationGracePeriodSeconds: 0
      volumes:
      - name: postgres-socket
        emptyDir: {}      
      - name: entrypoint
        configMap:
          name: {{ .Values.postgres.name }}-patroni-config
          items:
          - key: entrypoint.sh
            path: entrypoint.sh
            mode: 0755        
          - key: bootstrap_cluster.sh
            path: bootstrap_cluster.sh
            mode: 0755       
          - key: post_bootstrap.sh
            path: post_bootstrap.sh
            mode: 0755       
          - key: bootstrap_replica.sh
            path: bootstrap_replica.sh
            mode: 0755                                             
      - name: schedule-config
        configMap:
          name: {{ .Values.postgres.name }}-pgbackrest-entrypoint
          items:
          - key: backup-schedule.py
            path: backup-schedule.py
            mode: 0755
      - name: pgbackrest-config
        configMap:
          name: {{ .Values.postgres.name }}-pgbackrest-config
          items:
          - key: pgbackrest.conf
            path: pgbackrest.conf                    
          - key: bootstrap.sh
            path: bootstrap.sh
            mode: 0755
          - key: restore-point.sh
            path: restore-point.sh
            mode: 0755         
               
  volumeClaimTemplates:
  - metadata:
      labels:
        app: {{ .Values.postgres.name }}-app
        cluster-name: {{ .Values.postgres.name }}-cluster      
      name: pgdata
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
{{ end }}