{{ if or (eq .Values.global.deploymentMode "cluster") (eq .Values.global.deploymentMode "standby") }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.global.name }}-headless
  labels:
    app: {{ .Values.global.name }}-database
    cluster-name: {{ .Values.global.name }}-cluster
spec:
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.global.name }}-database
  labels:
    app: {{ .Values.global.name }}-database
    cluster-name: {{ .Values.global.name }}-cluster
spec:
  replicas: {{ .Values.postgres.replicas }}
  serviceName: {{ .Values.global.name }}-headless
  selector:
    matchLabels:
      app: {{ .Values.global.name }}-database
      cluster-name: {{ .Values.global.name }}-cluster            
  template:
    metadata:
      annotations:
      {{- range $key, $value := .Values.postgres.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      labels:
        app: {{ .Values.global.name }}-database
        cluster-name: {{ .Values.global.name }}-cluster
      {{- range $key, $value := .Values.postgres.labels }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}    
   
    spec:
      serviceAccountName: {{ .Values.global.name }}-{{ .Release.Namespace }}-sa
      securityContext:
        fsGroup: {{ .Values.postgres.securityContext.fsGroup }}
      containers:
      - name: {{ .Values.global.name }}-database
        securityContext:
          runAsUser: {{ .Values.postgres.securityContext.runAsUser }}
        {{ if eq .Values.postgres.type "postgis" }}
        image: {{ .Values.postgres.postgis.image.repository }}:{{ .Values.postgres.postgis.image.tag }}      
        {{ else}}
        image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
        {{ end }}     
        imagePullPolicy: {{ .Values.postgres.imagePullPolicy }}
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /readiness
            port: 8008
          initialDelaySeconds: 3
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        command:
        - /entrypoint.d/entrypoint.sh      
        ports:
        - containerPort: 8008
          name: tcp-8008
          protocol: TCP
        - containerPort: 5432
          name: tcp-5432
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: pgdata
        - mountPath: /var/run/postgresql/
          name: postgres-socket              
          ## CONFIGS ##
        - mountPath: /entrypoint.d
          name: entrypoint      
        - name: pgbackrest-config
          mountPath: "/etc/pgbackrest"
          readOnly: true
          ## END CONFIGS ##
        env:
        - name: PATRONI_KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PATRONI_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PATRONI_KUBERNETES_BYPASS_API_SERVICE
          value: 'false'
        - name: PATRONI_KUBERNETES_USE_ENDPOINTS
          value: 'true'
        - name: PATRONI_KUBERNETES_LABELS
          value: '{app: {{ .Values.global.name }}-database, cluster-name: {{ .Values.global.name }}-cluster}'
        - name: PATRONI_SUPERUSER_USERNAME
          value: {{ .Values.postgres.defaultAdmin.username }}
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgres.defaultAdmin.passwordSecret }}
              key: POSTGRES_PASSWORD
        - name: PATRONI_REPLICATION_USERNAME
          value: standby
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgres.defaultAdmin.passwordSecret }}
              key: STANDBY_PASSWORD
        - name: PATRONI_SCOPE
          value: {{ .Values.global.name }}-cluster
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: /var/lib/postgresql/data/pgdata
        - name: PATRONI_POSTGRESQL_PGPASS
          value: /tmp/pgpass
        - name: PATRONI_POSTGRESQL_LISTEN
          value: '0.0.0.0:5432'
        - name: PATRONI_RESTAPI_LISTEN
          value: '0.0.0.0:8008'
        resources:
          requests:
            cpu: {{ .Values.postgres.resources.requests.cpu }}
            memory: {{ .Values.postgres.resources.requests.memory }}
          limits:
            cpu: {{ .Values.postgres.resources.limits.cpu }}
            memory: {{ .Values.postgres.resources.limits.memory }}                    

      - name: {{ .Values.global.name }}-pgbackrest-backup
        {{ if eq .Values.postgres.type "postgis" }}
        image: {{ .Values.postgres.postgis.image.repository }}:{{ .Values.postgres.postgis.image.tag }}      
        {{ else}}
        image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
        {{ end }}     
        imagePullPolicy: {{ .Values.postgres.imagePullPolicy }}
        securityContext:
          runAsUser: {{ .Values.postgres.securityContext.runAsUser }}
        resources:
          requests:
            cpu: {{ .Values.pgbackrest.resources.requests.cpu }}
            memory: {{ .Values.pgbackrest.resources.requests.memory }}
          limits:
            cpu: {{ .Values.pgbackrest.resources.limits.cpu }}
            memory: {{ .Values.pgbackrest.resources.limits.memory }}                    
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: pgdata
        - mountPath: /var/run/postgresql/
          name: postgres-socket        
        - name: pgbackrest-config
          mountPath: "/etc/pgbackrest"
          readOnly: true         
        command:
          - python
          - /etc/pgbackrest/backup-schedule.py
      terminationGracePeriodSeconds: 30
      volumes:      
      - name: postgres-socket
        emptyDir: {}        
      - name: entrypoint
        configMap:
          name: {{ .Values.global.name }}-patroni-config
          items:
          - key: entrypoint.sh
            path: entrypoint.sh
            mode: 0755        
          - key: bootstrap_cluster.sh
            path: bootstrap_cluster.sh
            mode: 0755       
          - key: post_bootstrap.sh
            path: post_bootstrap.sh
            mode: 0755       
          - key: bootstrap_replica.sh
            path: bootstrap_replica.sh
            mode: 0755                  
      - name: pgbackrest-config
        configMap:
          name: {{ .Values.global.name }}-pgbackrest-config 
  volumeClaimTemplates:
  - metadata:
      labels:
        app: {{ .Values.global.name }}-app
        cluster-name: {{ .Values.global.name }}-cluster      
      name: pgdata
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.postgres.persistence.dbSize }}
{{ end }}