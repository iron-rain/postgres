{{ if or (eq .Values.global.deploymentMode "cluster") (eq .Values.global.deploymentMode "standby") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.global.name }}-patroni-config
data:
  entrypoint.sh: |
    #!/bin/bash

    if [[ $UID -ge 10000 ]]; then
        GID=$(id -g)
        sed -e "s/^postgres:x:[^:]*:[^:]*:/postgres:x:$UID:$GID:/" /etc/passwd > /tmp/passwd
        cat /tmp/passwd > /etc/passwd
        rm /tmp/passwd
    fi

    cat > /home/postgres/patroni.yml <<__EOF__
    bootstrap:
      method: pgbackrest
      pgbackrest:
        {{ if eq .Values.global.deploymentMode "standby" }}
        command: /entrypoint.d/bootstrap_replica.sh
        {{ else if .Values.global.restore }}
        command: /entrypoint.d/bootstrap_replica.sh
        {{ else }}
        command: /entrypoint.d/bootstrap_cluster.sh
        {{ end }}
        keep_existing_recovery_conf: True        
      post_bootstrap: /entrypoint.d/post_bootstrap.sh      

      dcs:
        postgresql:
          create_replica_methods:
            - pgbackrest
          pgbackrest:            
            command: /entrypoint.d/bootstrap_replica.sh
            keep_data: True
            no_params: True
          use_pg_rewind: true        
          use_slots: true
          parameters:
            wal_level: replica            
            max_replication_slots: 5            
            archive_mode: 'on'
            archive_command: pgbackrest --stanza=database  archive-push %p 
            archive_timeout: 60
          recovery_conf:
            restore_command: pgbackrest --stanza=database archive-get %f %p 
            standby_mode: 'on'
      pg_hba:
      - host all all 0.0.0.0/0 md5
      - local all all trust
      - host replication ${PATRONI_REPLICATION_USERNAME} ${PATRONI_KUBERNETES_POD_IP}/16 md5
    restapi:
      connect_address: '${PATRONI_KUBERNETES_POD_IP}:8008'
    postgresql:
      pg_hba:
      - host all all 0.0.0.0/0 md5
      - local all all trust
      - host replication ${PATRONI_REPLICATION_USERNAME} ${PATRONI_KUBERNETES_POD_IP}/16 md5
      - host replication ${PATRONI_REPLICATION_USERNAME} 127.0.0.1/32 md5
      connect_address: '${PATRONI_KUBERNETES_POD_IP}:5432' 
      use_unix_socket: true
      unix_socket_directories: /var/run/postgresql/
      authentication:
        superuser:
          password: '${PATRONI_SUPERUSER_PASSWORD}'
        replication:
          password: '${PATRONI_REPLICATION_PASSWORD}'  
    __EOF__

    unset PATRONI_SUPERUSER_PASSWORD PATRONI_REPLICATION_PASSWORD
    
    chmod 0700 /var/lib/postgresql/data/pgdata    

    exec /usr/bin/python /usr/local/bin/patroni /home/postgres/patroni.yml
  bootstrap_cluster.sh: |
    #!/bin/bash
    echo 'Bootstrapping cluster'
    if [ ! -d /var/lib/postgresql/data/pgdata ]; then
      initdb -D /var/lib/postgresql/data/pgdata
    fi
    if [ ! -d /var/lib/postgresql/data/pgdata ]; then
      chmod 0750 -R /var/lib/postgresql/data/pgdata    
    fi
  post_bootstrap.sh: |
    #!/bin/bash
    pgbackrest --stanza=database --log-level-console=info stanza-create
    pgbackrest --stanza=database --log-level-console=info backup
  bootstrap_replica.sh: |
    #!/bin/bash
    if [ ! -d /var/lib/postgresql/data/pgdata ]; then
      mkdir -p /var/lib/postgresql/data/pgdata
    fi
    chmod 0750 -R /var/lib/postgresql/data/pgdata        
    pgbackrest --log-level-console=info --stanza=database --delta restore
{{ end }}